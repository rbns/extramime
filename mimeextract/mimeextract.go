// mimeextract fetches a list of extension to mimetype mappings from
// the nginx/apache source repository and creates a source file to be used by
// extramime (or other tools, if thats useful..)
//
// note that this is rather hacky and could use some cleanup.. any comments/
// bugfixes/etc. are welcome :)
package main

import (
	"fmt"
	"flag"
	"log"
	"text/template"
	"os"
	"time"
)

// Template of the genrated go file
const goTemp = `// autogenerated on {{ .Date }} by github.com/rbns/extramime/mimeextract
// used mime definition: {{ .Url }}
package {{ .Pkg }}

type MimeInfo struct {
	Extension	string
	Type		string
}

var mimes = []MimeInfo {
	{{ range $v := .Mimes }}{{ $v }},
	{{end}}
}
`

var pkg = flag.String("p", "extramime", "Package name to generate for")
var out = flag.String("o", "types.go", "Output file")
var source = flag.String("source", "nginx", "Source type to use")
var url = flag.String("url", "", "Url from where to get the definitions. Defaults are used if empty.")

var sources = make(map[string]func() ([]MimeInfo, error))

func init() {
	flag.Parse()
}

func main() {
	var mimes []MimeInfo

	if _, ok := sources[*source]; !ok {
		log.Fatal("Unknown source specified.")
	}

	mimes, err := sources[*source]()
	if err != nil {
		log.Fatal(err)
	}

	file, err := os.Create(*out)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	err = generateGo(file, mimes)
	if err != nil {
		log.Fatal(err)
	}
}

// A pair of extension and mimetype
type MimeInfo struct {
	Extension	string
	Type	string
}

func (m MimeInfo)String() string {
	return fmt.Sprintf("MimeInfo{Extension: \"%v\", Type: \"%v\"}", m.Extension, m.Type)
}

// Write a go source file containing the mime type information
func generateGo(file *os.File, mimes []MimeInfo) error {
	t, err := template.New("go").Parse(goTemp)
	if err != nil {
		return err
	}

	data := struct {
		Date	string
		Url  string
		Pkg	 string
		Mimes []MimeInfo
		}{ Date: time.Now().Format("2006-01-02"), Url: *url, Pkg: *pkg, Mimes: mimes }

	return t.Execute(file, data)
}
